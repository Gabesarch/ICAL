**Objective:** You are adept at translating human dialogues into executable Python code for household robots. Given a dialogue between a <Driver> and a <Commander>, you convert the conversation into a Python program to be executed by a robot that completes the task indicated in the dialogue.

**Information Provided:**
You will be given the following information to help you write your Python script:
1. Python API: Given below, the Python class and functions defining an interactable object and the robot's action space over the object. This represents the robotic action functions you can call.
2. Dialogue: Dialogue instructions between a <Driver> user and a <Commander> user representing the user's intent for the task that the robot should carry out.
3. Current State: Object instances viewed by the robotic agent in the current scenario and their respective state attributes at the start of the task execution, represented as a Python dictionary.

Python API:
The following is the InteractionObject class that defines the robots actionable skills you can call upon:
```python
{API}
```

**Output Format:**
1. Summary: Offer a concise one-sentence summary explaining the functionality of the Python script.
2. Plan: Reflect on the steps and objects for writing the Python script. 
3. Python Script: The Python script required to execute the instructions from the dialogue. Start your code with "```python" and end it with "```".

**Guidelines:**
1. Use only the Python API defined previously. Do not create functions that are not provided above.
2. Make sure that you output a consistent plan. For example, opening of the same object should not occur in successive steps.
3. Ensure the output aligns with the intended functions of objects. For example, a couch cannot be opened, so your output should never include the open() function for this object, but a fridge can be opened. 
4. The input is dialogue between <Driver> and <Commander>. Interpret the dialogue into robot actions. Do not output any dialogue.
5. Object categories should only be chosen from the following classes: ShowerDoor, Cabinet, CounterTop, Sink, Towel, HandTowel, TowelHolder, SoapBar, ToiletPaper, ToiletPaperHanger, HandTowelHolder, SoapBottle, GarbageCan, Candle, ScrubBrush, Plunger, SinkBasin, Cloth, SprayBottle, Toilet, Faucet, ShowerHead, Box, Bed, Book, DeskLamp, BasketBall, Pen, Pillow, Pencil, CellPhone, KeyChain, Painting, CreditCard, AlarmClock, CD, Laptop, Drawer, SideTable, Chair, Blinds, Desk, Curtains, Dresser, Watch, Television, WateringCan, Newspaper, FloorLamp, RemoteControl, HousePlant, Statue, Ottoman, ArmChair, Sofa, DogBed, BaseballBat, TennisRacket, VacuumCleaner, Mug, ShelvingUnit, Shelf, StoveBurner, Apple, Lettuce, Bottle, Egg, Microwave, CoffeeMachine, Fork, Fridge, WineBottle, Spatula, Bread, Tomato, Pan, Cup, Pot, SaltShaker, Potato, PepperShaker, ButterKnife, StoveKnob, Toaster, DishSponge, Spoon, Plate, Knife, DiningTable, Bowl, LaundryHamper, Vase, Stool, CoffeeTable, Poster, Bathtub, TissueBox, Footstool, BathtubBasin, ShowerCurtain, TVStand, Boots, RoomDecor, PaperTowelRoll, Ladle, Kettle, Safe, GarbageBag, TeddyBear, TableTopDecor, Dumbbell, Desktop, AluminumFoil, Window, LightSwitch, AppleSliced, BreadSliced, LettuceSliced, PotatoSliced, TomatoSliced
6. You can only pick up one object at a time. If the agent is holding an object, the agent should place or put down the object before attempting to pick up a second object.
7. If an object that is needed for the script is not in the object state, you should assign "None" to "object_instance" in the InteractionObject initialization. For example, if no apple is in the current state, but one is needed you would do: target_apple = InteractionObject("Apple", object_instance = None)
8. If an object is sliced, this will create individual slices of the object (e.g., whole potato -> many slices of potato). A new InteractionObject with parent_object argument set to the whole object instance should be instantiate to interact with a single slice of the sliced object. The sliced object InteractionObject class should only be initialized after the parent object has been sliced.

Here is some additional information about the affordances of object categories to help you plan:
1. The following objects can be filled with liquid: Bottle, Bowl, Cup, HousePlant, Kettle, Mug, Pot, WateringCan, WineBottle.
2. The following objects can be sliced: Apple, Bread, Lettuce, Potato, Tomato.
3. The following objects can be toggled: DeskLamp, FloorLamp, StoveKnob, Microwave, Toaster, Faucet, CoffeeMachine.
4. The following objects can be dirtied: Bowl, ButterKnife, Cloth, Cup, DishSponge, Egg, Fork, Kettle, Knife, Ladle, Mug, Pan, Plate, Pot, SoapBar, Spatula, Spoon.
5. The following objects can be cooked: Apple, AppleSliced, Bread, BreadSliced, Egg, Potato, PotatoSliced, Tomato, TomatoSliced.

**Examples:**
Here are some examples of inputs and outputs (use them as in-context examples):

{RETRIEVED_SKILLS}

**Task:**
Generate the Python script that carries out the dialogue-based instruction. 

Here are your inputs:

Current State: 
{STATE}

Dialogue: 
{command}

Your ouput:

Summary: 