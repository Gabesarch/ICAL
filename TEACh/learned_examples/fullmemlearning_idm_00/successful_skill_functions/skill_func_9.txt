# Initialize InteractionObject instances for the bread, knife, toaster, tomato, and plate
bread = InteractionObject("Bread", object_instance="Bread_10")  # Bread on the countertop
knife = InteractionObject("Knife", object_instance="Knife_37")  # Knife on the dining table
toaster = InteractionObject("Toaster", object_instance="Toaster_38")  # Toaster is already toggled on
tomato = InteractionObject("Tomato", object_instance="Tomato_43")  # Tomato on the stool
plate = InteractionObject("Plate", object_instance="Plate_45")  # Plate on the countertop

# Slice the bread
knife.go_to()
knife.pickup()
bread.go_to()
bread.slice()
bread_sliced_1 = InteractionObject("BreadSliced", parent_object=bread.object_instance)  # Initialize new sliced object from sliced parent
bread_sliced_2 = InteractionObject("BreadSliced", parent_object=bread.object_instance)  # Initialize new sliced object from sliced parent

# Toast the first slice of bread
bread_sliced_1.pickup()
bread_sliced_1.place(toaster)
# Simulate waiting for the bread to toast (this would be simulated in a real scenario)
# After the bread is toasted, update the state to reflect that it is cooked
bread_sliced_1.change_state("cooked", True)  # Update the bread slice's state to toasted
bread_sliced_1.pickup()  # Remove the toasted bread slice from the toaster
bread_sliced_1.put_down()  # Put down the toasted bread slice

# Toast the second slice of bread
bread_sliced_2.pickup()
bread_sliced_2.place(toaster)
# Simulate waiting for the bread to toast (this would be simulated in a real scenario)
# After the bread is toasted, update the state to reflect that it is cooked
bread_sliced_2.change_state("cooked", True)  # Update the bread slice's state to toasted
bread_sliced_2.pickup()  # Remove the toasted bread slice from the toaster
bread_sliced_2.put_down()  # Put down the toasted bread slice

# Slice the tomato
tomato.go_to()
tomato.pickup()
knife.go_to()
tomato.slice()
tomato_sliced = InteractionObject("TomatoSliced", parent_object=tomato.object_instance)  # Initialize new sliced object from sliced parent

# Check if the plate is clean, if not, clean it
sink = InteractionObject("SinkBasin", object_instance="SinkBasin_55")
faucet = InteractionObject("Faucet", object_instance="Faucet_72")
if plate.check_attribute("dirty", True):
    plate.go_to()
    plate.pickup()
    sink.go_to()
    plate.place(sink)
    faucet.go_to()
    faucet.toggle_on()  # Turn on the faucet to clean the plate
    faucet.toggle_off()  # Turn off the faucet after cleaning
    plate.pickup()  # Pick up the clean plate
    plate.change_state("dirty", False)  # Update the plate's state to clean

# Assemble the sandwich on the clean plate
bread_sliced_1.go_to()
bread_sliced_1.pickup()
plate.go_to()
bread_sliced_1.place(plate)
bread_sliced_2.pickup()
bread_sliced_2.place(plate)
tomato_sliced.pickup()
tomato_sliced.place(plate)
