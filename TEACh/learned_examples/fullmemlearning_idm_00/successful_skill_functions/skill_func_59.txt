# Define InteractionObject instances for the pot, sink basin, faucet, and houseplant
dirty_pot = InteractionObject("Pot", object_instance="Pot_58")  # Selecting the dirty pot that is filled with water
sink_basin = InteractionObject("SinkBasin", object_instance="SinkBasin_61")
faucet = InteractionObject("Faucet", object_instance="Faucet_83")
houseplant = InteractionObject("HousePlant", object_instance="HousePlant_80")
countertop = InteractionObject("CounterTop", object_instance="CounterTop_40")

# (causal abstraction) Navigate to the dirty pot and pick it up to prepare for cleaning
dirty_pot.go_to()
dirty_pot.pickup()

# (causal abstraction) Navigate to the sink basin to clean the pot before using it to water the plant
sink_basin.go_to()
dirty_pot.place(sink_basin)

# (causal abstraction) Toggle on the faucet to clean the pot
faucet.go_to()
faucet.toggle_on()

# (causal abstraction) Toggle off the faucet after cleaning the pot
faucet.toggle_off()

# (causal abstraction) Now that the pot is clean, update its state to reflect this
dirty_pot.change_state("dirty", False)

# (causal abstraction) Pick up the clean pot to water the houseplant
dirty_pot.pickup()

# (causal abstraction) Navigate to the houseplant with the clean pot of water to perform the watering action
houseplant.go_to()
dirty_pot.pour(houseplant)

# (causal abstraction) After pouring, update the pot's state to reflect that it is now empty after pouring the water
dirty_pot.change_state("filled", False)
dirty_pot.change_state("fillLiquid", None)

# (causal abstraction) Update the houseplant's state to reflect that it has been watered
houseplant.change_state("filled", True)
houseplant.change_state("fillLiquid", "water")

# (causal abstraction) Place the now-empty and clean pot back on the countertop, maintaining the environment's order
dirty_pot.place(countertop)
