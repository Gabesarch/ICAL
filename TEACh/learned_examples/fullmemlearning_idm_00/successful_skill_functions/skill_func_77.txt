# Define InteractionObject instances for the knife, bread, toaster, and plate
knife = InteractionObject("Knife", object_instance="Knife_23")  # Knife is on the dining table
bread = InteractionObject("Bread", object_instance="Bread_65")  # Unsliced bread is in the cabinet
toaster = InteractionObject("Toaster", object_instance="Toaster_74")  # Toaster for toasting bread
clean_plate = InteractionObject("Plate", object_instance="Plate_19")  # Clean plate is on the dining table

# Retrieve the knife from the dining table
knife.go_to()
knife.pickup()

# Retrieve the unsliced bread from the cabinet
bread.go_to()
bread.pickup()

# Slice the bread to create bread slices
bread.slice()
bread_sliced = InteractionObject("BreadSliced", parent_object=bread.object_instance)  # Initialize new sliced object from sliced parent

# Toast the bread slices in the toaster
toaster.go_to()
bread_sliced.pickup()
bread_sliced.place(toaster)
toaster.toggle_on()  # Start toasting the bread slices
# Wait for the bread to toast (this step is abstracted in the script)
toaster.toggle_off()  # Stop toasting after it's done
bread_sliced.change_state("cooked", True)  # Update the bread slice's state to toasted

# Retrieve a clean plate from the dining table
clean_plate.go_to()
clean_plate.pickup()

# Place the toasted bread slices on the clean plate
bread_sliced.pickup()
bread_sliced.place(clean_plate)

# Causal abstraction comments:
# The knife is retrieved to slice the bread, which is necessary to create individual slices that can be toasted.
# The bread is sliced and then toasted, which is the main task of making toast.
# The toaster is toggled on to toast the bread and then off once toasting is complete.
# A clean plate is used to serve the toast, ensuring a presentable and ready-to-eat meal.
