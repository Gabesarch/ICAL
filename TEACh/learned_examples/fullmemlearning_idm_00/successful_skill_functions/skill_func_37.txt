# Define InteractionObject instances for the knife, bread, toaster, and a clean plate
knife = InteractionObject("Knife", object_instance="Knife_85")  # Knife is on the countertop
bread = InteractionObject("Bread", object_instance="Bread_61")  # Bread is on the countertop
toaster = InteractionObject("Toaster", object_instance="Toaster_63")  # Toaster is not toggled
clean_plate = InteractionObject("Plate", object_instance="Plate_70")  # Clean plate is on the countertop

# Slice the bread
knife.go_to()
knife.pickup()
bread.go_to()
bread.slice()
bread_sliced = InteractionObject("BreadSliced", parent_object=bread.object_instance)  # Initialize new sliced object from sliced parent

# Toast a slice of bread
toaster.go_to()
bread_sliced.pickup()
bread_sliced.place(toaster)
toaster.toggle_on()  # Start toasting the bread slice
# Wait for the bread to toast (this step is abstracted in the script)
toaster.toggle_off()  # Stop toasting after it's done
bread_sliced.change_state("cooked", True)  # Update the state of the bread slice to indicate it's toasted
bread_sliced.pickup()  # Remove the toasted bread slice from the toaster

# Place the toasted bread slice on a clean plate
clean_plate.go_to()  # Navigate to the clean plate
bread_sliced.place(clean_plate)  # Place the toasted bread slice on the clean plate

# Causal abstraction comments:
# The knife is picked up to slice the bread, which is necessary to create slices for toasting.
# The toaster is used to toast a slice of bread, fulfilling the requirement to toast a slice for consumption.
# The state of the bread slice is updated to reflect that it has been toasted, ensuring consistency with the actual object state.
# A clean plate is located and used to place the toasted bread slice on, adhering to the requirement of placing toast on a clean plate.
